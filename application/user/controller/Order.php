<?php
/**
 * Created by PhpStorm.
 * User: @ 若雨
 * Date: 2018/9/22
 * Time: 19:42
 */

namespace app\user\controller;

use app\index\controller\BaseController;
use app\admin\model\User;
use app\admin\model\Cart as CartModel;
use think\facade\Request;
use app\admin\Model\Cart;
use app\admin\model\Goods;
use app\admin\model\UserAddress;
use app\admin\model\Order as OrderModel;
class Order extends BaseController
{
    public function initialize(){
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->isLogin();
    }
    public function all(){
        // 获取用户的收获地址
        $userAddress = User::getUserAddress(session('user.id'));
        // 从购物车中获取商品
        $data = CartModel::getCart();
        $userCart = $data['userCart'];
        $sum_price = $data['sum_price'];
        $is = count($userCart);
        $is_add = count($userAddress);
        if($is == 0){
            return $this->redirect('/');
        }
        $this->assign([
            'userCart'      =>   $userCart,
            'sum_price'     =>   $sum_price,
            'is'            =>   $is,
            'userAddress'   =>  $userAddress,
            'is_add'       =>  $is_add
        ]);
        return $this->fetch();
    }

    // 生成订单
    /*
     * 1、接收到前台传来的收获地址ID、从数据库中找出对于的地址详情、并转换为json数据
     * 2、生产订单号
     * 3、从购物车库拿去对应的数据
     * 4、整合好数据入库
     * 5、清空购物车
     *
     * **/
    public function order(){
        if(Request::isAjax()){
            $data = Request::post();
            //判断是否有收获地址
            $userAddress = User::getUserAddress(session('user.id'))->count();
            if(!$userAddress){
                $state = [
                    'code'  =>  -1,
                    'msg'   =>  '请添加收获地址后再尝试下单'
                ];
                return json($state);
            }
            // 从数据库中拿去加入购物车的商品
            $user_id = session('user.id');
            $userCart = Cart::where(['u_id'=>$user_id])->select();

            // 判断是否有库存
            foreach ($userCart as $item){
                $kc = Goods::getGoodsStock($item['g_id']);
                if($kc < $item['number']  || $kc ===0 || $item['number'] == 0){
                    $state = [
                        'code'  =>  -5,
                        'msg'   =>  '某件商品库存量不足、请检查后重新尝试下单'
                    ];
                    return json($state);
                }
            }
            if(!$userCart->count()){
                $state = [
                    'code'  =>  -2,
                    'msg'   =>  '下单失败'
                ];
                return json($state);
            }
            foreach ($userCart as $item){
                $item['goods'] = Goods::getGoodsInfo($item['g_id'])->toArray();
            }
            // 订单号
            $order['order_id'] = get_order();
            // 获取用户收获地址
            $order['address'] = json_encode(UserAddress::get($data['addressID']));
            // 获取商品总价
            $sum_price = 0;
            foreach ($userCart as $item){
                $sum_price += $item['number'] * $item['goods']['shop_price'];
            }
            $order['payment'] = $sum_price;
            $order['user_id'] = session('user.id');
            $order['goods_item'] = json_encode($userCart);
            $order['shipping_name'] = $data['shipping_name'];
            $order['close_time'] = time() + 600;
            $info = OrderModel::create($order);
            if($info){
                Cart::where(['u_id'=>$user_id])->delete();
                $state = [
                    'code'    =>  1,
                    'orderId' =>  $info['order_id']
                ];
                return json($state);
            }

        }
    }
    public function showOrder($id){
        dd($id);
    }

    public function testingOrder(){
        $order_id = Request::post('order_id');
        return json(OrderModel::where(['id'=>$order_id])->value('status'));
    }
}